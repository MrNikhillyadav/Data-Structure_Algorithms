
// Note for me :
// 1. There are 3 approaches to this problem.(Brute-force, better, optimal)
// 2. Better & optimal approach depends on given array.
// 3. Case : 1 - for positives & negatives array elements, using Hashing is the Optimal Approach.
// 4. Case : 2 - for positives & zeroes, Double-pointer is the optimal approach and hasing would then be the better approach.


// Note: Double pointer is the Optimal Approach (*only when there are only positives and zeroes elements)

int longestSubarrayWithSumK(vector<int> a, long long k) {

    int n = a.size();
    int maxlen = 0;
    long long sum =a[0];
    int left =0; int right = 0;

    while(right < n){
        while(left <= right && sum > k){
            sum -= a[left];
            left++;
        }
            if(sum == k){
                maxlen = max(maxlen,right - left +1);
            }
            right++;
            if(right < n ){
                sum +=a[right];
        }
    }
    return maxlen;
}
