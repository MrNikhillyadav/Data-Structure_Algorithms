
// Better Approach:
//Time complexity : O(N)

// Method -1

// class Solution {
// public:
//     void sortColors(vector<int>& arr) {
//         int n = arr.size();
        
//     int cnt0 = 0, cnt1 = 0, cnt2 = 0;

//     for (int i = 0; i < n; i++) {
//         if (arr[i] == 0) cnt0++;
//         else if (arr[i] == 1) cnt1++;
//         else cnt2++;
//     }

//     //Replace the places in the original array:
//     for (int i = 0; i < cnt0; i++) arr[i] = 0; // replacing 0's

//     for (int i = cnt0; i < cnt0 + cnt1; i++) arr[i] = 1; // replacing 1's

//     for (int i = cnt0 + cnt1; i < n; i++) arr[i] = 2; // replacing 2's

//     }
    
// };


// Method-2
//Using Map, Time complexity : O(N)

// class Solution {
// public:
//     void sortColors(vector<int>& nums) {
//         int n = nums.size();
//         vector<int> hash(3, 0); // Use size 3 since you have three colors: 0, 1, and 2

//         // Count the occurrences of each color
//         for (auto x : nums) {
//             hash[x]++;
//         }
        
//         int index = 0;

//         // Update the original array based on the counts
//         for (int color = 0; color < 3; color++) {
//             while (hash[color] > 0) {
//                 nums[index] = color;
//                 index++;
//                 hash[color]--;
//             }
//         }
//     }
// };
